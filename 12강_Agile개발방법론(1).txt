12강. Agile 개발방법론(1)  [ 이언 교수 ]

학습개요
본 강의에서는 소프트웨어 개발 방법론 중 최근 널리 활용되고 있는 Agile 방법론에 대해 알아보고자 한다. 이를 위해 Agile 개발 방법론의 기본적인 개념과
본질에 대해 배워보고 Agile방법론의 철학이 담긴 Agile 선언문에 대해 알아보고자 한다. 그리고 Agile 방법론의 대표적인 실행 방법인 Scrum의 개념에 대해
알아보고 Scrum의 단계 중 제품 백로그를 작성하는 방법에 대해 살펴보고자 한다.

학습목표
1. Agile 방법론의 본질과 Agile 선언문의 철학을 이해한다.
2. Agile 방법론 중 Scrum 방법론의 개념을 이해한다.
3. Scrum 방법론 중 Backlog의 개념 및 작성방법을 이해한다.

목차
1. Agile SW 개발 프로세스
2. Agile 선언문
3. Scrum(1) - Scrum, Backlog


1. Agile SW 개발 프로세스
1-1. 왜 프로젝트는 실패하는가?
- 올바른 커뮤니케이션의 부재
  . 고객이 설명한 요건
  . 프로젝트 리더의 이해
  . 시스템 분석가가 디자인한 내용
  . 고개이 정말 원했던 것
  . 개발자가 구현한 결과
  . 제안서
  --> 모든 단계의 결과 다 다르다.

- Agile의 등장배경
  . SW 개발환경의 변화
    - 결과물의 배포 시기가 매우 중요해짐
    - 급격한 환경의 변화 및 그에 따른 요구사항의 변화가 잦음
  . 기존 방법론의 한계
    - 문서 및 절차 위주의 방법론(변화에 대응하기 어려움)
    - 프로젝트 참여자 간 능력 차이에 따른 일정관리의 어려움
  . Waterfall 방식의 문제
    - 불명확하고 자주 변화하는 사용자의 요구사항에 대응하기 힘듦
    - 개발된 모듈들의 통합이 어려움
    - 순차적인 개발 방식에 따른 충분한 test가 어려움
  
- Agile 방법론 정의
  . 'Agile=기민한, 날렵한' 이란 뜻으로 좋은 것을 빠르게 취하고, 낭비 없게 만드는 다양한 방법론을 통칭해 일컫는 말
    - 앞을 예측하며 개발하지 않고, 일정한 주기글 가지고 계속 검토해 나가며 필요할 때마다 요구사항을
      더하고 수정하여 커다랗게 살을 붙이면서 개발해 나가는 프로세스 모델 방식임
    - 미리 정해진 몇 개의 단계에 따라 엄격한 순서대로 이루어지는 일직선의 과정인 waterfall 프로세스와는 반대의 개념

- Agile 방법론 정의
  . Agile development 
    ① Requirements
    ② Plan
    ③ Design
    ③ Develop
    ⑤ Release
    ⑥ Track and Monitor
    . Continuous cycles
    . Small, high-functioning, collaborative teams
    . Flexible/continuous evolution
    . Customer invovement
    --> 전체 사이클이 계속 반복해서 수행해나감
    --> 위험 요인 최소화

- Agile 방법론 특징
  . 고객과 개발자의 지속적인 소통을 통하여 변화하는 요구사항을 신속하게 수용할 수 있음
  . 개발자 개인의 가치보다는 팀의 목적을 우선시하며 고객의 의견을 가장 우선시 하려 노력함
  . 팀원들과의 주기적인 회의 및 제품 시현을 통한 이슈 점검
  . 개발을 진행하면서 프로그램을 Test해보고 고객으로부터 피드백을 받음

- Agile 방법론 장단점
  . 장점
    - 계획 혹은 기능에 대한 수정과 변경에 유연하게 대응이 가능함
    - 고객 요구사항에 대한 즉각적인 피드백에 유연하며 프로토타입모델을 빠르게 출시할 수 있음
    - 점진적으로 테스트할 수 있어서 버그를 쉽고 빠르게 발견할 수 있음
  . 단점
    - 확정되지 않은 계획 및 요구사항으로 인한 반복적인 유지보수 작업이 많음
    - 공통으로 해야 할 작업들이 많을 수 있음(회의, 로그 등)

- Waterfall 방법론
  . 장점 
    - 오랜기간 사용 된 S/W개발 모델로써, 다양한 사례가 풍부하고 검증된 방식에 따라 업무 진행이 가능
    - 전체 과정이 S/W의 생명 주기와 일치하여, 이해하기 쉬움
    - 각 진행 단계 별 산출물(문서)이 확실하여, 진행중 및 진행이후에도 관리가 용이함
  . 단점
    - 각 단계가 종결 되어야 다음 단계 진행 가능
    - 사용자 피드백에 대한 빠른 대응이 어려움
    - 테스트 단계에서 발견된 중요 결함은 치명적인 문제가 될 수 있음.

  . 작업 순서
    ① Define requirements
    ② Design
    ③ Code
    ③ Test
    ⑤ Implement
    . Sequential/linear stages
    . Upfront planning and in-depth documetation
    . Best for simple, unchanging projects
    . Close rproject mnager invovement
    --> https://nanminwoo.com/33
  
- Agile 방법론 사용 현황 : Top3 Benefits of Agile
  . 요구사항 변경관리 : 87%
  . 팀 생산성 증가 : 85%
  . 프로젝트 가시성 개선 : 84%

  . Agile 방법론
   - 스크럼 Scrum 58%


2. Agile 선언문
2-1. Agile 선언문 역사
- 1990년대 중반 기존의 무겁고 규범적인 방법론에서 탈피하여 좀더 가벼운 방법론, 경량화 방법론을 지향하는
  방향으로 개발 방법론들이 발전함
- 2001년 Agile 전문가가 모여 Agile software 개발 선언문((Agile Manifesto)를 발표함
  . 프로세스와 도구 보다는 개인과 개인의 상호작용
  . 포괄적 문서화 보다는 작동하는 software
  . 계획을 고수하기 보다는 변화에 대응

2-2. Agile 선언문의 주요 실천 원칙
2-2-1. 최우선 가치는, 가치 있는 소프트웨어를 일찍 그리고 지속적으로 전달해서 고객을 만족시키는 것이다.
- 고객이라는 하나의 동일한 목표를 가지는 것
- 자주 보여주는 것이 피드백을받고 반영할 수 있는 최고의 방법

2-2-2. 작동하는 소프트웨어를 자주 전달하라. 2~4주 간격으로 하되 더 짧은 기간을 선호하라.
- 일정 주기를 통해서 팀에 리듬감을 더함
- 주기를 통해서 평가하고 다시 계획함

2-2-3. 작동하는 소프트웨어를 보여주는 것이 진척을 확인할 수 있는 길이다.
- 고객에게 신뢰를 전달할 수 있는 방법
- 결과물 없이 커뮤니케이션이 어려움

2-2-4. 비록 개발이 후반부일지라도 요구사항 변경을 환영하라. Agile 프로세스들은 변화를 활용해 고객의 경쟁력에 도움이 되게 한다.
- 프로젝트의 공통된 목표는 고객을 만족시키는 것
- 변화를 통해서 결과를 만들어 가는 것이 Agile 방법론

2-2-5. 개발팀으로, 또 개발팀 내부에서 정보를 전하는 가장 효율적이고 효과적인 방법은 얼굴을 보며 할 수 있는 대화이다.
- 이메일이나 문서로 충분한 내용을 다루기 어려움
- 시간을 절약하는 길은 직접 대면하는 방법


3. Scrum(1) - Scrum, Backlog
3-1. Scrum의 정의
- 프로젝트 관리를 위한 Agile 개발방법론
- Scrum은 예측을 최적화 하고 위험요소를 관리하기 위해 반복적이고 점진적인 접근방법으로 개발하는 방법론
- 경험적 프로세스 관리를 수행하는데 필요한 세 가지 축
  . 투명성(Transparency), 검토(Inspection), 적응(Adaptation)
- 소프트웨어 개발 프로젝트 뿐만 아니라 소프트웨어 유지보수 팀이나 일반적인 프로젝트 관리에서도 적용될 수 있으

3-2. Scrum 구성 요소
- Product Backlog
- Sprint Backlog
- Sprint
- Daily Scrum
- 회고

3-3. Scrum 프로세스와 역할
- PO(제품책임자), Team, Scrum Master(스크럼마스터), Stakeholder
- 제품 백로그 > 스프린트 백로그 > 스프린트(데일리 스크럼) > 회고

3-4. Scrum 역할과 책임
- Product Owner(PO)
  . 제품의 총괄 책임자
  . 팀의 제품/서비스에 대해 모든 피드백과 요구사항에 관한 결정
  . 제품의 수익서(ROI)에 대한 책임
  . 시장가치에 따라 구현할 특성과 기능에 우선순위 부여
  . 제품 백로그에서 특성 및 기능, 우선순위 변경 가능
  . 작업 결과에 대한 승인 또는 거부 결정
  . 비즈니스 부서와 커뮤니케이션

- Team
  . 프로젝트의 결과를 위해 각자의 역할을 수행
  . Cross-functional, Self-organization(자기 조직화)
    - Self-organization 팀은 스스로 작업을 수행하고 프로세스를 관리하며 진행 상황을 모니터링하는 방법을 스스로 결정(스스로 의사결정)
  . 일반적으로 5~9명으로 구성
  . 상근, 동일 장소 배치 권장

- Scrum Master(스크럼마스터)
  . 팀이 완전히 생산적이고 기능적이 되도록 보장
  . 모든 역할과 기능에 걸쳐 밀접하게 협력하고 장애를 제거
  . 외부의 간섭과 방해로부터 팀을 보호
  . 스크럼 프로세스가 준수되도록 보장
  . Daily 스크럼, 스프린트 계획 및 리뷰 회의에 참석 및 진행
  . 팀간 상호작용은 스크럼 마스터끼리 회의를 통해 수행

- Stakeholder(이해관계자)
  . 이해관계는 있지만 제품 제공에 대한 책임은 없음
  . 우선순위 부여, 팀과 협력, 리뷰 등에 참여
  . 예시) 고객 및 사용자

3-5. Scrum 프로세스 - 제품 백로그(Product Backlog)
- 제품 및 서비스의 우선순위가 매겨진 요구사항 목록
  . 개발할 제품의 요구사항인 사용자 스토리 집합이며, 우선순위로 관리
  . 사용자 중심의 기능들을 우선순위를 매겨 나열한 리스트
  . 보통 지난 스프린트 때 얻은 고객 피드백을 바탕으로 구성
- 제품에 대한 모든 변경 요구사항을 포함하는 단 하나의 소스
- 제품 백로그는 요구사항에 대한 완성본이 아님
  . 일반적인 개발 방법론 내 요구사항 정의서와 가장 큰 차이점

- 제품 백로그 예시
  . 일차적인 기능(features) 또는 요구사항 리스트
  - 김동양은 최신번전의 메일 프로그램을 사용하길 원한다.
  - 동양시스템즈 직원(김동양)은 모바일 메일프로그램 사용을 위해 ...
  - ... 등

- User story
  . 사용자 관점에서 사용자가 서비스 플랫폼이나 시스템을 사용하면서 희망하는 짧고 간단하고 심플하게
   표현한 기능들에 대해서 서술한 내용
   - 과거 요구사항 명세처럼 업무 범위를 구체화하기 위한 개발자 입장이 아닌, User Story는 사용자가 사용하는
     관점에서 어떤 가치를 제공할 것인지를 설명

- User Story 필요성
  . 요구사항 반영을 위해 개발 문서에 의존하면 안됨
    - 변화를 받아들이지 못함
    - 고객이 진정으로 원하는 것이 아닌 적혀있는 명세에 따라 개발
    - 잘못된 추측과 가정이 난무

- User story 요소
  . Who, What, Why
  . 제목
   [ 사용자 역할(suer role) ] 는
   [ 목적을 이루기 (goal) ] 위해
   [ 어떤 활동이나 작업(task) ] 을 하기를 원한다.
   
   Definition of Done
   [ 스토리 완료 여부를 판단하는 검증 기준 ]

  . HTML 편집 기능
   [ user role : 블로그 작성자 ] 는
   [ goal : 블로그 포스팅 ] 을 하기 위해
   [ task : HTML 편집 기능 ] 를 원한다.

   Definition of Done:
   . 편집기는 HTML5 규약을 지원해야 한다.
   . Tag 자동 작성 기능이 제공되어야 한다.
   . 편집기에서 저장된 후, Syntax가 자동 체크되어야 한다.
   . Preview가 제공되어야 한다.

- 완료 기준(Definition of Done), 인수 기준(Acceptance Criteria)
  . 사용자 스토리를 완료싴기 위한 조건 명서(Given, When, Then)
  . 백로그 항목을 충족하여 개발 작업이 완료된 상태 여부를 판단하는 기준
    - 각각 명확하게 통과 또는 실패의 결과로 하나의 체크리스트와 같이 작동하여
      만족하는 요건과 아닌 요건을 명시
    - Given - When - Then

- 제품 백로그와 유저 스토리와의 관계
  . 애자일에서의 일의 단위
    - Theme > Epic > User story > Task
    - Thema(테마) : 맡은 서비스, 제품에서 큰 덩어리로 볼 수 있는 부분 (예> 초기 화면, 홈 화면 등등)
    - Epic(에픽) : 테마를 구성하는 큰 기능의 단위 (예 > 로그인 관련)
      . 스토리들이 모여 고객을 만족시키는 큰 스토리
    - User Story(유저 스토리) : 에픽을 상황이나 벙법등 기준에 의한 사용자의 한 가지 액션 행위 (예> 구글 계정으로 로그인할 수 있다.)
    - Task(태스크) : 유저 스토리를 구현하기 위한 상세한 개발 항목 (예 > 구글 인증, 입력 필드 구성 등)

- 제품 백로그와 유저 스토리와의 관계
  Product Backlog - Epic
  User stories for a Sprint - User story1, User story2
  Set of Acceptance Criterion - Acceptance Criteria1, Acceptance Criteria2

  Epic - User Story 1 - Acceptance Criteria1
                           - Acceptance Criteria2
        - User Story 2 - Acceptance Criteria1
                           - Acceptance Criteria2

정리하기
- Agile 개발 방법론의 정의, 철학에 대한 이해
- Agile 선언문에 대한 이해
- Agile 개발 방법론 중 Scrum의 정의, 구성요소의 이해
  . Scrum 프로세스 이해
  . 제품 백로그의 내용
  . User story


정리하기
1. 애자일 방법론은 전체 미래를 예측하며 계획을 수립한 후 개발하지 않고, 일정한 주기글 가지고 계속 검토해 나가며 필요할때마다 요구사항을 
   더하고 수정하여 커다랗게 살을 붙이면서 개발해 나가는 프로세스 모델 방식을 의미한다.
2. 애자일 선언문에 포함되어 있는 대표적인 애자일 개발방법의 철학은 '최우선 가치는, 가치 있는 소프트웨어를 일찍 그리고 지속적으로 전달해서
   고객을 만족시키는 것이다." 이며, 이 말은 결국 고객이라는 하나의 동일한 목표를 가지고 개발을 진행하라는 뜻으로 결국 고객을 만족시키기
   위해서는 자주 산출물을 보여주고 피드백을 받고 반영하는 것이 최고의 방법이라는 것을 의미한다.
3. 애자일 개발방법론 중 가장 대표적인 방법은 스크럼 방법론이다. 스크럼은 프로젝트 관리를 위한 상호.점진적 개발방법론 기반 프레임워크로서
   스크럼 방법론의 구성요소가 크게 제품 백로그, 스크린트 계획, 스프린트.데일리 스크럼, 회고로 구성되어 있다. 이중 제품 백로그는 개발제품의
   요구사항인 사용자 스토리의 집합이며 사용자 스토리는 사용자관점에서 정의된 요구사항으로 정의할 수 있다.
