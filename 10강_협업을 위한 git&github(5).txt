10강. 협업을 위한 git&github(5) [ 이언 교수 ]

학습개요
본 강의에서는 git tag를 사용하는 방법과 github을 사용하는 방법에 대해 알아보고자 한다. git tag의 개념 및 git tag를 생성 및 삭제하는 방법에 대해 알아보고자 한다.
그리고 원격저장소와 github의 개념에 대해 배워보고 github을 통해 기본적인 code관리 방법에 대해 살펴보고자 한다.

학습목표
1. git tag의 개념과 사용방법에 대해 이해한다.
2. 원격저장소와 github의 개념에 대해 이해한다.
3. 기본적인 github의 사용방법 및 로컬저장소의 연동방법에 대해 이해한다.

학습목차
1. git tag
2. 원격 저장소와 github
3. github 기초

1. git tag
1-1. tag
- commit을 참조하기 쉽도록 알기 쉬운 이름을 붙이는 것을 의미
  . 특정 commit을 가리키는 링크
  . commit과 tag의 차이점이라고 한다면 commit의 경우 checkout 하여 내용을 수정할 수 있으나,
    tag는 수정이 불가능하며, 따라서 읽기전용 commit같은 개념
- 목적이 정해져 있는 것은 아니지만 보통 tag는 소프트웨어의 버전을 릴리즈 할 때 사용
  . 제품이 1.0이 릴리즈 될때 tagging을 한번 해 두고 1.1버전을 개발하면서 그 사이에 만들어지는 branch들과
    commit들이 존재하는데 이러한 것들을 commit으로만 관리하다가 1.1 버전이 완성되는 commit에 tagging을 하여 관리

1-2. tag의 종류
- Lightweight tag와 Annotated tag가 존재
  . Lightweight tag의 경우는 단순히 버전같은 태크이름만을 남기는 tag
  . Annotated tag는 만든 사람의 이름, 이메일, 태깅 날짜, 태그 메시지까지 저장
  . Lightweight 태그만을 남기면 이게 어떤 태그인지 누가 만든것인지에 대한 정보들을 알 수 없기 때문에
    Annotated 태그를 사용하는것이 일반적임

1-3. tag의 생성하기
- Lightweight tag 생성하기
  . git tag "tag명" 으로 생성
  . git show "tag명" 으로 생성된 tag가 붙은 commit에 대한 정보를 확인 가능
  --> git tag v1.0
  --> git show v1.0

- Annotated tag 생성하기
  . git tag -a "tag명" 으로 생성
  . Lightweight tag와 달리 생성된 tag의 상세정보를 확인할 수 있음
  --> git tag -a v1.1 -m "second tag 1.1"
  --> git show v1.1

1-4. tag기타 명령어들
- Head가 아닌 commit에 tag 생성하기
  . git tag -a "tag명" "hashcode"으로 생성
- tag 삭제
  . git tag -d "tag명" 으로 삭제 가능


2. 원격 저장소와 github
2-1. 저장소
- 저장소(git repository)란 말그대로 소스 코드가 저장되어 있는 여러 개의 브랜치(Branch)들이 모여 있는
  디스크상의 물리적 공간을 의미
  . 파일이 변경 이력 별로 구분되어 저장
  . 비슷한 파일이라도 실제 내용 일부 문구가 서로 다르면 다른 파일로 인식하기 때문에 파일을 변경
    사항 별로 구분해 저장할 수 있음

2-2. 원격 저장소와 로컬 저장소
- git은 원겨 저장소와 로컬 저장소 두 종류의 저장소를 제공
  . 로컬 저장소(Local Repository) : 내 PC에 파일이 정되는 개인 전용 저장소
  . 원격 저장소(Remote Repository) : 파일이 원격 저장소 전용 서버에서 관리되며 여러 사람이 함께 공유하기 위한 저장소

            |----------- Commit -a --------->|                              |
            |--- add(-u) --->|--- commit --->|                              |
            |                                         |--------- Push -------->|
    [Workspace]          [Index]     [Local Repository]       [Remote Repository]
            |<------------------ Pull or Rebase ------------------------|
            |                     |                   |<-------- Fetch --------|
  Revert  |<--------- Checkout Head ------|                              |
            |<-- Checkout ---|                   |                              |
            |------------- Diff Head ----------|                              |
Compare |------- Diff ------| 

2-2. 원격 저장소와 로컬 저장소
- 원격 저장소는 로컬 저장소와 연결되어 있으면서 '백업'과 '협업'이라는 중요한 역할을 수행함
  . 특히 큰 규모의 프로젝트를 진행한다면 다른 사람과의 협업은 필수인 경우가 많은데, 이때 원격 저장소의 역할이 중요
- 원격 저장소를 직접 구축할 수도 있지만 이를 만들고 유지하는 것은 쉽지 않음
  . 원격 저장소를 제공하는 서비스를 사용
  . Github, gitlab, bitbuctket, etc

2-3. github : 대표적인 git 원격 저장소
- 공개 저장소는 무료 -> ms 인수 후 대부분의 서비스 무료화
- 오픈소스 소프트웨어의 성지
- 특징
  . 강력한 협업 기능 제공
  . 확장이 용이
  . 다양한 서비스와의 연동 : CI/CD
  . 기업을 위한 엔터프라이즈 버전 제공

2-4. github 활용성
- 원격 저장소에서 git 사용 가능
  . github은 git 사용을 위한 원격 저장소를 제공하는 서비스이기 때문에 따로 git을 설치하지 않아도 온라인 상에서 git의 
    버전 관리 기능을 사용할 수 있음
  . 로컬 저장소가 있다면 원격 저장소와 연결해서 사용이 가능
- 로컬 저장소 백업 가능
  . github에 원격 저장소를 만들고 사용자의 로컬 저장소를 연결한후 동기화하면 지역 저장소를 인터넷 상에 백업 가능
- 협업 프로젝트에 사용 가능
  . 팀 프로젝트를 진행할 때도 github을 원격 저장소로 하여 프로젝트를 수행
- 개인의 작업물(개발이력)을 남길 수 있음.
  . github에서 소스를 수정하고 오픈소스에 contribution을 하는 등의 모든 행위가 기록으로 남음
  . 개발자 포트폴리오 작성에 용이


3. github 기초
3-1. github 시라니로
- github 내 저장소 생성하기
- 로컬 저장소를 github에 연결하기
- github에 파일 올리기
- github에서 직접 commit하기
- github에서 파일 내려받기

3-2. github 가입하기
- github.com 에 접속해 sign up
- 계정 생성 및 이메일 인증 후 로그인 가능

- Github내 내가 작업중인 저장소들
- 나의소개

3-3. github 에 원격 저장소 만들기
- new repository 메뉴를 실행
- 저장소 이름 및 필요항목을 기입 후 create repository 실행

- 저장소 이름 및 필요항목을 기입
  . Repository name 저장소 이름
    - 숫자, 언더바(_), 붙임표(-)등을 사용할 수 있음
  . Description : 저장소에 대한 간단한 설명을 기입
  . Public/Private : 저장소를 공개로 할지 비공개로 할지 선택
  . Readme : 저장소에 대한 소개와 설명을 작성하는 Readme 파일을 자동으로 생성할 지 여부
  . add.gitignore : git을 관리하는데 있어 제약사항을 추가
  . add a License : 오픈소스 프로젝트용으로 저장소를 만들 경우, 해당 오픈 소스에 대한 License를 선택

- git ignore
  . 프로젝트 작업시 로컬 환경의 정보 등 원격 저장소에 관리하지 말아야되는 파일들에 대해서 지정하여 원격 저장소에
   실수로 올라가지 않도록 관리하는 파일
  . 정의한 정보들에 해당하는 파일들에 대하여 git track하지 않도록 설정하는 역할을 함
  . .gitignore 파일은 프로젝트 최상위 위치에 존재

- https로 접속하는 주소는 다음과 같은 형태
  . https://github.com/user_id/저장소명
  
- bsmj.100@gmail.com
- Choi@@0407

3-4. 로컬 저장소를 github내 원격 저장소에 연결하기
- 원격 저장소에 연결할 로컬 저장소 생성하기
  . 이전 차수의 실습 파일을 clone해 와서 로컬 저장소를 생성
  . git clone https://github.com/EON-LEE/Course-SoftwareEngineering.git
  . week7폴더의 week7_1.sh를 실행해 commit이력이 있는 로컬 저장소 생성

- 로컬저장소에 원격저장소(github) 추가하기
  . 로컬 저장소를 github에 생성한 원격 저장소와 연결
  . git remote add origin "생성한 github 저장소 주소"
  . 원격 저장소(remote)에 origin(github)이름으로 원격 저장소를 추가
  . 원격저장소은 -v option으로 확인

3-5. github에 파일 올리기
- 로컬 저장소의 파일(commit)을 원격 저장소로 보내기
  . git push 명령어를 통해 로컬 저장소의 commit을 원격 저장소로 보낼 수 있음.
  . git push <저장소명><브랜치명>
  . git push -u origin master(원격 저장소의 master branch name)
  . 로컬 저장소의 branch를 origin(github)의 master branch로 push
  . -u는 로컬 저장소의 branch를 원격 저장소의 master branch에 연결할 때 사용

- 로컬 저장소의 파일(commit)을 원격 저장소로 보내기
  . ID/PW 방식으로 github에 접속하는 방식 대신 personal access token을 발급 받아야 함(2021.08 이후 정책 변화)
  . Settings-Developer setting - Personal access token - generate new token 메뉴에서 발급받을 수 있음.
  --> 토큰을 발급받아야 로컬파일을 github로 올릴 수 있음.
  --> Settings - Developer settings - Personal access token - generate new token

  --> Token 사용처
  --> Token 유효기간
  --> 권한-실습에서는 전부 체크
  --> 이화면에서만 확인가능하므로 복사해 놓아야 함 분실 시 새로 Token을 발급받아야 함

  . git push -u origin master(원격 저장소의 master branch name)

3-6. github에 파일 올리기
- 로컬 저장소의 commit을 원격 저장소로 보내기
  . 로컬 저장소의 main branch가 github에 올라온(push) 된 것을 확인할 수 있음.

- github에서 직접 commit하기
  . github은 그 자체로도 git과 같은 역학을 할 수 있으므로 github 사이트에서도 소스코드를 수정하고 commit을 할 수 있음.
  . github에서 신규 file 생성 후 commit하기
 
3-7. github에 파일 내려받기
- 원격 자장소에서 파일 내려받기
  . 원격 저장소에 있는 소스 파일을 다른 사용자가 수정했거나 github에서 직접 commit하면 로컬 저장소와 차이가 생김
  . 이럴때, 원격 저장소와 로컬 저장소의 상태를 같게 만들기 위해 원격 저장소의 소스를 지역 저장소로 가지고 옴
  . git pull명령을 통해 저장소 동기화를 수행할 수 있음

- git pull : git remote 명령을 통해 서로 연결된 원격 저장소의 최신 내용을 로컬 저장소로 가져오면서 병합함.
  . Git push의 반대 성격

  . git pull <저장소><브랜치명>
  . git pull origin master(현재 실습에서는 main branch를 연동함)


정리하기
- git tag 기능을 통해 관리해야 할 특정 commit에 tag를 달 수 있음.
  . release 버전 관리
- 원격저장소 및 github의 이해
  . 파일이 저장소 전용 서버에서 관리되며 여러 사람이 함께 공유하기 위한 저장소
- github을 통해 로컬 저장소와 원격 저장소간의 연동 방법에 대한 이해
  . git remote, git push, git pull


정리하기
1. git tag는 release버전관리를 위해 링크를 다는 개념으로, git tag기능을 통해 관리해야 할 commit에 tag를 달 수 있다.
2. 원격 저장소는 파일이 외부의 전용 서버에 관리되며 여러 사람이 함께 공유할 수 있는 저장소를 의미한다.
   그리고 github은 원격저장소 기능을 제공하는 대표적인 서비스이다.
3. github을 통해 개인 로컬 저장소와 저장소 간의 연동이 가능하다. git remote 명령을 통해 원격 저장소를 로컬저장소와 연동할 수 있다.
   그리고 git push명령을 통해 로컬 저장소의 작업물을 저장소로 올릴 수 있으며 반대로 git pull명령을 통해 원격 저장소의 
   최신 상태를 로컬저장소와 동기화 할 수 있다.
