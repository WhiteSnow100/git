5강. Shell Programming  [ 이언 교수 ]
13:23
학습개요
본 강의에서는 Linux의 Shell script 작성을 위한 Shell Programming에 대해 알아보고자 한다. 이를 위해 여기서는
Linux의 Shell의 개념과 script 작성을 위한 기본적인 개념 및 문법에 대해 알아보고자 한다. 또한 Shell programming을
위한 조건, 반복문의 다양한 활용 방법에 대해 배워보도록 한다.

학습목표
1. Shell의 개념과 Shell script를 이해한다.
2. 기본적인 Shell Programming의 방법을 이해한다.
3. 조건문과 반복문을 포함한 Shell Programming의 심화 내용을 이해한다.

학습목차
1. Shell의 개념
2. Shell Programming 기본
3. Shell Programming 심화

1. Shell의 개념
1-1. Shell의 기능
- HW : CPU/RAM/Storage/Device/etc
- Kernel : os의 core, HW Control service 기능 제공
  . Process / Memory / File system
  . Device management
  . HW resource control
- Shell : 리눅스의 핵심인 커널과 사용자를 연결해주는 인터페이스
  . kernel이 제공하는 서비스에 대한 인터페이스를 사용
  . script programming
- Utility & User applications : 각종 사용자 프로그램들

[ Utils & Apps            ]
  [ Shell (System call) ]
    [ Kernel           ]
      [ HW          ]
  < Linux structure >

- 명령어 해석기 기능, 프로그래밍 기능, 사용자 환경 설정 기능, 등
- 명령어 해석기 기능 : 
  . 사용자와 커널 사이에서 명령을 해석하여 전달하는 해석기(interpreter)와 번역기(translator) 기능
  . 사용자가 로그인하면 셸이 자동으로 실행되어 사용자가 명령을 입력하기를 기다림
  . 프롬프트 : 셸이 사용자의 명령을 기다리고 있음을 나타내는 표시
- 프로그래밍 기능 :
  . 셸은 자체 내에 프로그래밍 기능이 있어 반복적으로 수행하는 작업을 하나의 프로그램으로 작성 가능
  . 셸 프로그램을 셸 스크립트라고 함
- 사용자 환경 설정 기능 : 
  . 사용자 환경을 설정할 수 있도록 customization 기능을 제공
  . 명령을 찾아오는 경로를 설정하거나, 파일과 디렉터리를 새로 생성할 때 기본 권한을 설정하거나,
    다양한 환경 변수 등을 설정 가능


2. Shell Programming 기본
2-1. Shell Script
- script란 일반적으로 텍스트 형식으로 저장되는 프로그램으로서 한줄씩 순차적으로 읽어
  실행되도록 작성된 프로그램을 의미
- Shell Script : 운영체제의 Shell 즉 bash가 읽어 실행해주는 Script
  . text 파일 내에 prompt에서 실행이 가능한 command를 작성하고, line by line으로 동작하게 하는 것
- Shell Script를 작성하는 것을 Shell Programming 이라 함.
  . Shell script를 통해 다양한 작업(일괄처리, 자동화 etc)이 가능
  . Shell script로 작성된 파일은 .sh 확장자로 저장해 관리
    (다른 확장자도 가능하나 shell script임을 알게 하기 위해 대부분 .sh를 권장함)

2-2. Shell Script 작성 및 실행
2-2-1. shell script 작성
- 대부분의 editor에서 작성이 가능, vim을 통해 작성

2-2-2. shell script 실행방법
- "bash 파일명.sh" 로 실행
  --> 본 과정에서는 bash shell을 대상으로 함

  [test.sh]
  #!/bin/bash
  echo "hello world"

  [bash test.sh 이력 결과]
  bash.4.4$ bash test.sh
  hello world
  bash.4.4$ _
  --> #!/bin/bash : 해당 script를 실행하기 위한 shell의 경로를 지정

2-3. 기본 출력
2-3-1. echo
- 화면에 한 줄의 문자열을 출력
  [echo 실행 결과]
  bash-4.4$ echo "hello world"
  hello world
  bash-4.4$ _

2-3-2. printf
- 문자를 형식화 하여 화면에 출력
- % 지시자와 \ 문자를 이요하여 출력 형식을 지정 가능
  [printf 실행 결과]
  bash-4.4$ printf "hello world"
  hello worldbash-4.4$ printf "hello world \n"
  hello world
  hello worldbash-4.4$ printf "%d + %d = %d\n" 10 10 20
  10 + 10 = 20
  hello worldbash-4.4$ printf "%d + %d = %d\n" 10 10 40
  10 + 10 = 40  
  bash-4.4$ _

2-4. I/O Redirection
- 표준 입출력 장치
  . 표준 입력 장치 : 셸이 작업을 수행하는 데 필요한 정보를 받아들이는 장치(키보드)
  . 표준 출력 장치 : 실행 결과를 내보내는 장치(화면의 출력 값)
  . 표준 오류 장치 : 오류 메시지를 내보내는 장치(화면의 출력 값)
- 표준 입출력을 다른 파일 또는 명령의 입력으로 보내는 것을 I/O Redirection
- 파일 디스크립터 : 파일 관리를 위해 리눅스에서 부여하는 일련 번호
  . 입출력 장치를 변경할 때는 파일 디스크립터를 사용
  . 0(stdin) : 표준 입력, 1(stdout) : 표준 출력, 2(stderr) : 표준 오류

2-4-1. 출력 redirection : >
- 기존 파일의 내용을 삭제하고 새로운 결과를 덮어쓰고 저장
- ex) [명령] > [파일 이름], [명령] 1> [파일 이름]
  [echo 실행 결과]
  bash-4.4$ bash test.sh  # test.sh 파일 내용 실행
  hello world
  bash-4.4$ ls -l
  total 4
  -rw-r--r--  1 work   work   31 Oct 9 06:31 test.sh
  bash-4.4$ ls -l > test.sh   # echo hello world라는 내용이 위 내용으로 변경됨
  bash-4.4$ cat test.sh
  total 0
  -rw-r--r--  1 work   work   0 Oct 9 06:31 test.sh
  bash-4.4$ _

2-4-2. 출력 redirection : >>
- 기존 파일으 내용에 출력 내용을 추가함
- ex) [명령] >> [파일 이름], [명령] 1>> [파일 이름]
  [echo 실행 결과]
  bash-4.4$ bash test.sh  # test.sh 파일 내용 실행
  hello world
  bash-4.4$ ls -l
  total 4
  -rw-r--r--  1 work   work   31 Oct 9 06:31 test.sh
  bash-4.4$ ls -l >> test.sh   # echo hello world라는 내용에 위 내용이 추가됨
  bash-4.4$ bash test.sh
  hello world
  test.sh: line 3: total: command not found
  test.sh: line 4: -rw-r--r--: command not found
  bash.4.4$ cat test.sh
  #!/bin/bash
  echo "hello world"
  total 4
  -rw-r--r--  1 work   work   31 Oct 9 06:32 test.sh
  bash-4.4$ _

2-5. PIPE
- 파이프(Pipe)란 프로세스간 통신을 할때 사용하는 커뮤니케이션의 한 방법
- 여러개의 명령어(프로그램)를 실행할 때 이전 명령어의 결과를 다음 명령어의
  입력값으로 사용하고 싶을 때 사용
2-5-1. 명령어1 | 명령어2
- 명령어 1의 출력이 명령어 2의 입력이 됨.
- 셸 프롬프트(Shell prompt)에서 한번에 사용 가능한 파이프의 개수는 제한이 없음
- 리다이렉션은 프로세스의 입력이나 출력을 파일로 사용하는 것이라면 pipe는 프로세스간 사용하는 것

2-5-2. PIPE예시
- Process 중 man 명령어로 실행된 process만 검색
  . ps -ef  # 전체 프로세스보기
  . ps -ef | grep man  # man으로 필터링 한 프로세스만 보기

2-6. 기타 명령어들
2-6-1. history 
- 이전 실행 명령어들을 출력

2-6-2. clear
- 프롬프트 창의 명령 실행 기록들을 지움

2-7. 알아두면 좋은 명령어들
2-7-1. 재실행 : !!, !n
- !! : 바로 전 명령어 실행
- !n : n 번째 줄(history 상 line number) 명령어 실행

2-7-2. 이전 명령어 탐색 : 방향키(↑,↓)
- 방향키를 통해 이전 명령어들을 순차적으로 탐색할 수 있음.

2-7-3. 명령어 완성 기능 : tab
- 입력하고자하는 명령 또는 파일의 이름, 경로가 너무 긴 경우, 해당 단어의 일부만 입력한 후 tab키를 누르면 나머지 부분이 자동 완성되어 생성됨.
- 해당 하는 단어가 2개 이상인 경우 리스트를 화면에 출력

2-8. 변수(Variable)
- Shell 내 변수는 크게 3 종류로 나뉨 : 환경 변수, 특수 변수, 프로그램 변수
- 환경 변수 : 사용하고자 하는 shell이 실행될 때 초기 설정 작업이 실행되는데 그 정보를 저장하고 있는 변수
- 특수 변수 : shell 프로그램에 parameter로 전달될 때 사용
- 프로그램 변수 : shell 프로그램 내에서 동작하는 변수
  . 미리 선언하지 않으면, 값 대입 시 자동으로 변수가 생성
  . 대소문자를 구분

2-8-1. 환경 변수
- 프롬프트 변겨, PATH 변경 등과 같이 셸이 환경을 정의하는 중요한 역할을 수행하는 변수
  . HOME : 현재 사용자의 홈 디렉터리    
  . LANG : 기본 지원되는 언어
  . TERM : 로그인 터미널 타입
  . USER : 사용자의 이름
  . COLUMNS : 현재 터미널의 컬럼 수
  . PS1 : 1차 명령 프롬프트 변수
  . BASH : bash셸의 경로
  . HISTFILE : 히스토리 파일의 절대 경로
  . HISTFILESIZE : 히스토리 파일의 크기
  . MAIL : 도착한 메일이 저장되는 경로
  . PATH : 실행 파일을 찾는 디렉터리 경로
  . PWD : 사용자의 현재 작업 디렉터리
  . SHELL : 사용자의 로그인 셸
  . DISPLAY : X윈도에서 프로그램 샐행 시 출력되는 창
  . LINES : 현재 터미널 라인 수
  . PS2 : 2차 프롬프트 변수
  . BASH_VERSION : bash 버젼
  . HISTSIZE : 히스토리 파일에 저장되는 명령어(줄)의 개수
  . HOSTNAME : 시스템의 호스트명
  . LOGNAME : 로그인 이름

- $환경변수 형태로 환경변수를 사용가능
- env 명령으로 해당 시스템의 환경 변수를 확인할 수 있음

2-8-2. 변수 - 단일 변수
- 하나의 값(문자열)만을 저장할 수 있는 변수
- 변수 값의 사용(출력) : echo, printf
- 변수의 접근 및 출력시 pre-fix로 $표시 사용
- 변수의 대입 시 '=' 좌우에 공백이 없어야 함

- 예시1
test.sh
#!/bin/bash
var1=test
echo $var1

bash-4.4$ bash test.sh
test
bash-4.4$ _

- 예시2 
test.sh
#!/bin/bash
var1="hello world"
echo $var1

bash-4.4$ bash test.sh
hello world
bash-4.4$ _

2-8-3. 변수의 입출력 - 문자형 변수

test.sh
#!/bin/bash
var1='hello world'
echo "print 1"
echo $var1
echo "print 2"
echo var1
echo input new value for var1:
read var1
echo "print 4"
var2='hello'
echo $var2
var2=$var1
echo "print 5"
echo $var2

bash-4.4$ bash test.sh
print 1
hello world   #변수를 사용할 때는 $기호 사용
print 2
var1
input new value for var1:
hello new world    # hello new world var1 변수에 할당
print 4
hello
print 5
hello new world
bash-4.4$ _

2-8-4. 변수의 입출력 - 숫자형 변수
- 변수에 대입된 값은 모두 문자열로 취급, 따라서 숫자형 연산을 위해선 expr 사용 필요
  (역따옴표(backqoute(`))를 사용해야 함.)
- 괄호 및 *연산은 \를 앞에 붙여야 함

#!/bin/bash
var1=1234
var2=$var1+1000
echo $var2
var3='expr $var1 + 1000'
echo $var3
var4='expr \($var1 - 1000\) / 2
echo $var4
var5='expr $var4 \* 2 + 1000'
echo $var5

bash-4.4$ bash test.sh
1234*1000
2234
117
1234
bash-4.4$ _

2-8-5. 변수의 입출력 - parameter 변수
- Parameter 변수는 외부에서 script를 실행할 때 같이 주어지는 인자들을 control하는 변수
- Parameter 변수는 $0(실행파일), $1(parameter 1), $2(parameter 2) .... 로 표현됨
- 전체 parameter $*로 표현

#!/bin.bash
echo file name is $0
echo first parameter is $1
echo second parameter is $2
echo third parameter is $3
echo all parameters are $*

bash-4.4$ bash test.sh 1 2 3
file name is test.sh
first parameter is 1
second parameter is 2
third parameter is 3
all parameters are 1 2 3
bash-4.4$ _

2-8-6. 변수의 입출력 - 표준입력 읽기 : read
- 표준입력에서 입력값을 읽어 변수에 순서대로 저장
- 남은 변수는 마지막 변수에 모두 저장

#!/bin/bash
echo -n Enter password:
read password
echo Your password is $password

bash-4.4$ bash test.sh
Enter password:test
Your password is test

2-8-7. 변수 - 배열
- 한 변수에 여러 개의 값을 저장할 수 있는 변수
  . 변수이름=(값1 값2 값3)으로 표현(공백 주의)
- 공백을 포함한 문자열은 큰따옴표나 작은따옴표로 묶어야 함

#!/bin/bash
var=(1 "hello world")
echo $(var[0])
echo $(var[1])

bash-4.4$ bash test.sh
1
hello world
bash-4.4$ _

- 배열의 값을 가져오기 위해선 ${변수이름[인덱스]}의 방식을 사용해야 함.

#!/bin/bash
var=(1 2 3)
echo ${var[0]}
echo ${var[1]}
echo ${var[2]}

bash-4.4$ bash test.sh
1
2
3

- 배열의 전체 값을 가져오는 방법은 다음과 같음.
  . ${변수이름[@]} : 인덱스가 들어갈 자리에 @ - 공백 무시
  . ${변수이름[*]} : 인덱스가 들어갈 자리에 * - 공백 무시
  . "${변수이름[@]}" : 큰따옴표("")로 묶은 뒤 인덱스가 들어갈 자리에 @ - 공백 포함
  . "${변수이름[*]}" : 큰따옴표("")로 묶은 뒤 인덱스가 들어갈 자리에 * - 공백 포함

#!/bin/bash
var=('a a' 'b   b')
echo ${var[@]}
echo ${var[*]}
echo "${var[@]}"
echo "${var[*]}"

bash-4.4$ bash test.sh
a a b b 
a a b b
a a b   b
a a b   b
bash-4.4$ _

2-8-7-1. 배열에 값 추가하기
- 해당 배열의 순서에 값 대입

#!/bin/bash
var=(1 2)
echo "${var[@]}
var[2] = 4
var+=(3)
echo "${var[@]}

bash-4.4$ bash test.sh
1 2
1 2 4 3 
bash-4.4$ _

2-8-7-2. 배열의 크기 구하기
- # 기호를 사용해 크기를 구함

#!/bin/bash
var=(1 2 3 4)
echo "${#var[@]}"

bash-4.4$ bash test.sh
4
bash-4.4$

2-8-7-3. 배열 합치기
- () 안에 배열을 넣어 합침
#!/bin/bash
var1=(1 2)
var2=(3 4)
var=(${var1[@]} ${var2[@]})
echo "${var[@]}"

bash-4.4$ bash test.sh
1 2 3 4
bash-4.4$ _

2-8-7-4. 배열의 값 제거
- unset 명령어로 값 삭제

#!/bin/bash
var=(1 2 3 4)
echo "${var[@]}
unset var[3]
echo "${var[@]}"

bash-4.4$ bash test.sh
1 2 3 4
1 2 3
bash-4.4$ _

2-9. 주석 - comment
- 주석 또는 코멘트(comment)는 프로그래밍에 있어 내용을 메모하는 목적
- 한줄 주석은 문장 젤 앞에 #를 넣어 사용
- 여러줄 주석은 :<<'END' 부터 END 까지로 표현 가능

#!/bin/bash
echo hello world!
# echo hello world!!
echo hello world!!!
:<<'END'
echo hello world!!!!
echo hello world!!!!!!
END
echo hello world!!!!!!!

bash-4.4$ bash test.sh
hello world!
hello world!!!
hello world!!!!!!!
bash-4.4$ _


3. Shell Programming 심화
3-1. 조건문 - if/else
- 기본
  . 조건에 따른 분기를 표현
  [ 문법 ] 
  if [조건]
  then
     참일 경우 실행
  else
     거짓일 경우 실행
  fi

#!/bin/bash
s1=$1
s2=$2
echo first word is $s1
echo second word is $s2

if [ $s1 == $s2 ]
then
  echo "these words are same"
else 
  echo "these words are different"
fi

bash-4.4$ bash test.sh hello world
first word is hello
second word is world
these words are different
bash-4.4$ _

bash-4.4$ bash test.sh hello hello
first word is hello
second word is hello
these words are same
bash-4.4$ _

- 조건을 표현할 수 있는 다양한 비교연산자가 존재 - 문자열 비교
구분    |  비교                     |  결과
문자열 | "문자열1"=="문자열2" | 두 문자열이 같으면 참
비교    | "문자열1"!="문자열2"  | 두 문자열이 다르면 참
         |  -n "문자열"             | 문자열이 NULL(빈 문자열)이 아니면 참
         |  -z "문자열"              | 문자열이 NULL(빈 문자열)이면 참

- 조건을 표현할 수 있는 다양한 비교연산자가 존재 - 산술 비교
구분    |  비교                    |  결과
산술    | 수식1 -eq 수식2       | 두 수식(또는 변수)이 같으면 참
비교    | 수식1 -ne 수식2       | 두 수식(또는 변수)이 다르면 참
         |  수식1 -gt 수식2       | 수식1이 크다면 참
         |  수식1 -lt 수식2        | 수식1이 작다면 참

#!/bin/bash
input=$1
if [ $input -gt 50 ]
then
  echo "UP"
elif [ $input -lt 50 ]
then 
  echo "DOWN"
else
  echo "ANSWER"
fi

bash-4.4$ bash test.sh 100
UP
bash-4.4$ bash test.sh 10
DOWN
bash-4.4$ bash test.sh 50
ANSWER
bash-4.4$ _

- and, or 논리연산자
  . and : '-a' 또는 '&&' 연산자 사용
  . or : '-o' 또는 '||' (shift+back slash)

#!/bin/bash
s1=$1
s2=$2
s3=$3
if [ $s1 == $s2 ]&&[ $s2 == $s3 ]
then
  echo "these words are same"
else
  echo "these words are different"
fi

bash-4.4$ bash test.sh hello hello world
these words are different
bash-4.4$ bash test.sh hello hello hello
these words are same
bash-4.4$ _

3-2. 반복문 - for
- 기본
  . 실행하고자 하는 구문을 원하는 만큼 반복하고자 할 때 사용
  . 다양한 표현방식이 있음.

  [ 문법 ]
  for 변수 in 값1 값2 값3
  do
     반복할 command
  done

#!/bin/bash
for var in 1 2 3 4 5
do
  echo $var
done

bash-4.4$ bash test.sh
1
2
3
4
5
bash-4.4$ _

- 배열을 활용하는 방법
  . for 변수 in 배열

  [ 문법 ]
  for 변수 in 배열
  do
    반복할 command
  done

#!/bin/bash
arr=(6 7 8 9 10)
for var in "${arr[@]}"
do
  echo $var
done

bash-4.4$ bash test.sh
6
7
8
9
10
bash-4.4$ _

- seq를 활용한 방법
  . 'seq 시작 간격 끝'

  [ 문법 ]
  for 변수 in 'seq 시작 간격 끝'
  do
    반복할 command
  done

#!/bin/bash
for var in 'seq 1 2 10'
do
  echo $var
done

bash-4.4$ bash test.sh
1
3
5
7
9
bash-4.4$ _

- 이중 괄호를 사용한 방법
  . for ((시작;끝;증가폭))

  [ 문법 ]
  for ((시작;끝;증가폭))
  do
    반복할 command
  done

#!/bin/bash
for ((var=0;var<10;var++))
do
  echo $var
done

bash-4.4$ bash test.sh
0
1
2
3
4
5
6
7
8
9
bash-4.4$ _

- 이중 괄호를 사용한 방법 - 예시) 구구단

#!/bin/bash
echo "출력하고 싶은 단을 입력하세요 :"
read j
for ((i=1;i<9;i++))
do
  num=`expr $j \* $i`
  echo -n " $j x $i = #num "
done

bash-4.4$ bash test.sh
출력하고 싶은 단을 입력하세요 :
6
 6 x 1 = 6
 6 x 2 = 12
 6 x 3 = 18
 6 x 4 = 24
 6 x 5 = 30
 6 x 6 = 36
 6 x 7 = 42
 6 x 8 = 48
 6 x 9 = 54
bash-4.4$ _

3-3. 반복문 - while
- 조건이 참인 동안 loop내 command를 계속 반복 수행 

  [ 문법 ]
  while [ 조건 ]
  do
     반복할 command
  done

#!/bin/bash
echo "enter your password"
read pw
while [ $pw != "hello" ]
do
  echo "wrong password"
  echo "enter your password correctly"
  read pw
done
echo "you have been certificated"

bash-4.4$ bash test.sh
enter your password
12
wrong password
enter your password correctly
123
wrong password
enter your password correctly
1234
wrong password
enter your password correctly
hello
you has been certificated
bash-4.4$ _
* Loop에서 빠져나갈때는 ctrl + c

3-4. 사용자 정의 함수
- 기본
  . 사용자가 기능을 정의한 함수(function 명령어 생략 가능)
  . 정의 한 함수명을 입력해 사용자 정의 함수를 실행
 
  [ 문법 ]
  function 함수명 {
    command
  }
  함수명

#!/bin/bash
my_function () 
{
  echo "hello world"
}

# execute function
my_function

bash-4.4$ bash test.sh
hello world

- 함수 값 반환(return)
  . 다른 프로그래밍 언어의 함수와 달리 shell 함수는 호출할 때 값을 반환할 수 없음.
  . shell script 가 실행되는 프로세스에서 exit을 통해 상태 종료 표시만을 프로세스 실행 결과로 반환할 수 있음
  . 일반적으로 0은 성공을 나타내며 나머지인 1~255는 에러
  . 값을 리턴 받는 경우 $?을 사용해야 함. (문자열은 안됨)

  [ 문법 ]
  function 함수명 {
    command
    return 결과값
  }
  
  변수="$(함수명)"
  echo $?

#!/bin/bash
my_function () 
{
  read input1
  read input2
  var1=`expr $input1 + $input2`
  return $var1
}
func_result="$(my_function)"
echo $?

bash-4.4$ bash test.sh
1
4
5
bash-4.4$ _

  . 문자열의 경우 출력을 변수로 받아 활용해야 함
  [ 문법 ]
  function 함수명 {
    command
    return 결과값
  }
  
  변수="$(함수명)"
  echo 변수

#!/bin/bash
my_function () 
{
  local result="function result"
  echo "$result"
  read input1
  read input2
  var1=`expr $input1 + $input2`
  return $var1
}
func_result="$(my_function)"
echo $func_result

bash-4.4$ bash test.sh
1
4
function result
bash-4.4$ _


정리하기
- shell의 이해
  . kernel이 제공하는 서비스에 대한 인터페이스를 제공
  . 명령어 해석기 기능, 프로그래밍 기능, 사용자 환경 설정 기능, 등
- shell programming
  . 변수, 배열, 입출력
  . 조건문, 반복문, 사용자 정의 함수


1. script란 일반적으로 텍스트 형식으로 저장되는 프로그램으로서 한줄씩 순차적으로 읽어 실행되도록 작성된 프로그램이다.
   즉 Shell Script는 운영체제의 Shell 즉 bash가 읽어 실행해주는 Scrip라고 할 수 있다. 그리고 개발자의 목적에 맞게 이러한
   Shell Script를 작성하는 것을 Shell Programming이라고 할 수 있다.
2. Shell은 변수, 배열 등 기본적인 Programming 요소들을 제공한다. 또한 Shell은 조건문(IF-ELSE), 반복문(for, while), 사용자 정의
   함수(User-Defined Function)등을 제공해, 개발자는 Shell script에서 다양한 logic의 구현이 가능하다.
