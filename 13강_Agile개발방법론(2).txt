13강. Agile 개발방법론(3)  [ 이언 교수 ]

학습개요
본 강의에서는 소프트웨어 개발 방법론 중 최근 널리 활용되고 있는 Agile 방법론에 대해 알아보고자 한다. 이전 강의에 이어 Scrum의 
단계 중 스프린트 계획 수립단계와 스프린트 운영 단계에서 수행해야 하는 여러 가지 내용들에 대해 배워보고자 한다. 그리고 Agile
방법론의 또 다른 실행 방법인 Kanban의 개녀과 장, 단점에 대해 살펴보고자 한다.

학습목표
1. Scrum 방법론 중 스프린트 계획 수립 방법에 대해 이해한다.
2. Scrum 방법론 중 스프린트 수행 방법에 대해 이해한다.
3. 스프린트 리뷰와 회고 방법에 대해 이해한다.
4. Agile 방법론 중 Kanban 방법론에 대해 이해한다.

목차
1. Scrum(2) - Sprint 계획
2. Scrum(3) - Sprint 운영
3. Kanban


1. Scrum(2) - Sprint 계획
1-1. Scrum 프로세스
- Product Backlog : Product Owner
  -> Sprint Plannig, Sprint Backlog : Development Team 
      . Topic 1 : forecast PBI's
      . Topic 2 : plan work (e.g. tasks)
  -> Sprint(max 1 month) : Scrum Master
      . Product Backlog Refinemen
      . Daily Scrum
  -> Potentially Releasable Increment
      . Sprint Review
      . Sprint Retrospective

- 스프린트 계획
  . 개요
    - 팀의 제품 백로그의 일부를 스프린트에 내보내기로(수행하기로) 합의하는 과정
  . 목표
    - 스프린트에서 구현될 기능 목록 결정
    - 잠재적 출시 가능 제품(Potentially Shippable Product Increment)
      또는 최소 실행 가능 제품(Minimum Viable Product, MVP)을 목표로 해야 함
    + 팀이 최소 노력으로 고객에게 검증 결과를 받을 수 있는 수준의 제품

- 스프린트 계획 과정
  . 스프린트 백로그
    - 스프린트 목표, 스프린트를 위해 선정한 제품 백로그 아이템들, 그리고 이것을 완료하는 것에 대한
      계획을 모두 포함하여 스프린트 백로그 라고 함
    - 스프린트 게획은 최대 시간이 정해진 Timeboxed 이벤트로, 일 개월 기간의 스프린트인 경우 8시간이 넘지 않도록 해야 함
    + 스프린트 계획을 수립하기 위해 많은 시간을 소요하는 것은 애자일 철학에 맞지 않음
    + 스프린트 기간이 더 짧은 경우 보통 스프린트 계획 시간도 더 짧음

  . 스프린트 백로그 작성
    - 제품 백로그에서 해당 스프린트에 수행할 내용을 스프린트 백로그로 정의
    - 정의한 스프린트 백로그를 실제 수행할 개발자의 업무단위(task)로 분할
    + Task는 1~2일 안에 끝낼 수 있는 업무 단위어야 함.

    - 제품백로그 : 스토리1, ...., 스토리5
      -> 스프린트 백로그 : 스토리1 (사용자 관점), 타스크(개발자 관점) .....

- 스프린트 계획
  . Estimation(추정)
    - 스프린트 내 수행해야 할 스토리마다 구현에 필요한 업무량을 추정해야 함.
    - 일반적으로 추정은 시간이 아니라 '스토리 점수'로 표현 함
    + 예를 들어, '버튼의 텍스트 편집' 처럼 명확하고 구체적인 작업을 '1 스토리 점수' 라고 정의
    + 다른 스토리를 정의하는 기준이 되며 이후 모든 스토리 점수 추정에 근거가 됨

  . Estimation 방법 - planning poker
    - 팀 전체가 모여서 스토리들을 늘어놓고 각 스토리마다 스토리 포인트(Story-point)라고 하는 단위로 일의 크기를 매기는 자리
    --> 팀원전체가 일의 크기를 알수있고, 할당 받은 일의 크기를 알고있으므로 일의 분배에서 불만을 없앨 수 있다.

  . 스프린트 백로그 예시
    - 제품 백로그 아이템, 스프린트 작업, 지원자, 초기업무량 추정치, 업뭉의 양에 대한 새로운 추정치(하루가 끝날때 남은 것)


2. Scrum(3) - Sprint 운영
2-1. Scrum 프로세스 : 스프린트 수행단계
- 스프린트
  . 꾸준함을 갖기 위해 한달 또는 그보다 짧은 기간으로 고정된 길이의 스프린트 계획을 수행하는 단위
  . 특정 범위에 대한 일정한 "계획, 개발, 테스트, 기능완료" 주기를 일컫는 말
    - 1~6주 범위 내에서 특정 기간을 산정, 일반적으로 2주 or 4주를 가장 많이 사용
    - 스프린트 기간 동안에는 분석, 설계, 코딩 그리고 테스트와 배포까지의 모든과정을 포함함
    - 데일리 스크럼, 스프린트 리뷰, 스프린트 회고를 포함하여 프로덕트 목표를 달성하기 위해 필요한 모든 업무를 수행
    - 직전의 스프린트가 끝나는 즉시 시작

- 스프린트 주요 수행 내용
  . 백로그 정제 
  . 데일리 스크럼
  . 진행 상황 추적
  . 스프린트 리뷰
  . 스프린트 회고

- 스프린트 운영 - 백로그 정제(gromming/refinement)
  . 사용자 스토리를 제거하거나 새로 추가할 때, 또는 사용자 스토리의 크기가 클 때 백로그를 정제 회의를 수행
  . 백로그 정제에서 수행하는 주요 작업들
    - 에픽을 보다 작은 사용자 스토리로 분할하고 분할된 사용자 스토리에 대한 스토리 포인트 추정
    - 다음 스프린트에 완성할 사용자 스토리들을 정제하는 작업
    - 새로운 사용자 스토리에 대한 스토리 포인트 추정
    - 필요하다면 기존의 사용자 스토리에 대한 재 추정
  --> 스토리 포인트 재추정
  --> 기존의 사용자 슽리 제거
  --> 우선순위 재조정
  --> 에픽을 분할

- 스프린트 운영 - 데일리 스크럼
  . 매일 어제 한일, 오늘 할일, 해결해야 할 장애/문제 요소를 공유하는 회의 (매일 15분 정도 수행)
    - 데일리 스크럼의 목적은 스프린트 목표 대비 진척을 점검하고, 필요하면 다음 업무 진행 계획을
      변경하여 스프린트 백로그를 조정하는 것
  . 데일리 스크럼 필요성
    - 진행하는 프로젝트의 불확실성이 높으면 매일 상태를 업데이트할 필요성이 높아짐
    - 계속해서 서로를 체크하고 조율할 수 있는 데일리 스크럼을 통해 상태를 지속적으로 체크 가능
  . 데일리 스크럼 규칙
    - 정해진 시간은 없음(꼭 아침에만 해야 되는 것은 아니다.)
       단, 최대 15분 이내에 마치는 것을 권장
    - 꼭 서서 하지 않아도 됨.
    - 팀원들이 모두 돌아가면서 최소한 아래에 질문에 답함
    + 지난 데일리 스크럼부터 지금까지 내가 완수한 것이 무엇인가
    + 다음 데일리 스크럼까지 내가 하기로 한 것이 무엇인가
    + 현재 장애가 되고 있는 것(곤란하고 어려운 것)이 무엇인가
  . 데일리 스크럼 장점
    - 일에 집중하고 자율관리 팀으로서의 능력을 향상시킬 수 있음
    - 데일리 스크럼은 팀의 소통을 향상시키고 팀이 가지고 있는 장애물을 식별하며
      신속한 의사 결정을 촉진하여 별도로 다른 미팅을 할 필요성을 줄여 줌
    + 예) 데일리 미팅에서 현재 내가 봉착한 기술정 Issue에 대해 간략히 공유하고
       다른 팀원의 노하우를 통해 데일리 스크럼이 끝난 후 바로 해결
  . 데일리 스크럼의 함정 - 정보전달을 위한 회의?
    - 만약에 데일리 스크럼의 목적을 정보 전달이라고만 생각한다면 데일리 스크럼이 필요가 없음
      (애자일은 불필요한 행위를 최대한 지양)
    - 스크럼 팀간의 communication을 위한 자리이므로 보고와 같은 딱딱한 양식이 되는 것을
      엄격히 통제하고 스크럼 팀간 '캐미'(chemistry)를 극대화할 수 있어야 함

- 스프린트 운영 - 진행상황 추적(burndown chart)
  . 번다운 차트는 소멸차트라고도 부르며 한 스프린트동안 남아있는 작업량을 보여주는 그래프
  . 번다운 차트는 매일 팀이 완료할 작업이 얼마나 남았는지에 대한 새 추정치를 보여주며
    기울기를 통해 작업의 수행 속도를 알 수 있음.

- 스프린트 운영 - 스프린트 리뷰(sprint review)
  . 스프린트가 종료되었을 때 개발팀이 스프린트동안 개발한 증분의 기능을 고객을 포함한 이해관리자들에게
    보여주고 피드백을 받는 과정을 말함
  . 고객은 자신이 요청한 요구사항(유저스토리)이 해당 스프린트 동안 제품이 잘 반영되었는지 평가한 후 
    피드백을 하면 PO는 고객의 피드백이나 여러 사항들을 정리하여 다음 스프린트에 반영되도록 제품 백로그를 다시 갱신
  . 스프린트의 한주당 스프린트 리뷰 시간은 한 시간으로 제약
  . 스프린트 리뷰를 준비하는데 30분을 넘지 않도록 해야 함

- 스프린트 운영 - 스프린트 회고(sprint retrospective)
  . 회고(Retrospective)는 스프린트를 이루는 가장 마지막 세션으로써 스크럼팀원이 모두 참여하여 해당 스프린트 전체를
    되돌아보고 반성하면서 앞으로 어떤 부분이 바뀐다면, 자신이 바꾼다면 스프린트가 더욱 효율적으로 진행될 수 있을 지
    스스로 생각해보고 정리하는 세션을 의미

  . 회고의 필요성
    - 스크럼 팀의 유기적 협업과 효율성 극대화를 위한 효과적인 방법
    + 스크럼 팀의 '케미(chemistry)'를 극대화시킬 수 있음.
    - 회고 세션을 통해 모든 스크럼팀원이 개인 성과중심주의에 빠지는 것을 예방
    - 팀 전체의 목표를 향해 자신이 팀원으로서 어떠한 역할을 해야하는지 깨우치도록 도움

  . 회고 수행 방법 - SWOT
    - 스프린트를 수행하며 4가지 포인트에 대해 각자 느낀 바를 적어서 공유
    - 스크럼 마스터는 각각 영역별로 군집을 생성
    - 1명씩 돌아가면서 4가지 영역의 군집들에 대해 순서대로 혹은 자유롭게 통의

  . 회고 수행 방법 - KPT
  . KPT기법은 다음의 항목들에 대해 의견을 적음으로 단순히 좋은 것과 나쁜 것이 아닌, 조금 더 깊이 있게 스스로를 돌아보게 함
    - K(Keep) : 금번 스프린트에서 좋았거나 유지하고 싶은 점
    - P(Problem) : 금번 스프린트에서 제거하고 싶은 문제점
    - T(Try) : 다음 스프린트에서 시도하고 싶은 것
  . 다음 스프린트에서 꼭 시행되어야 할 내용들을 액션아이템으로 뽑아 시행여부를 추적하는 것 또한 특징
  
  . 회고 수행 방법 예시
    - Strengths / Weaknesses / Opprtunities / Threats
    - Keep / Problem / Try / Action Item

  . 회고 수행 시 주의 사항 - 불평이 가득한 회고
    - 내용 자체가 너무 부정적으로 흐르거나, 팀 내 인원에 대한 불만으로 니어지지 않도록 해야 함
    - 팀 내부에서 원인과 개선점을 찾기보다, 팀 외부의 조직이나 제품 책임자(혹은 PM)에게
      책임을 전가할 수 있으므로 유의해야 함

  . 회고 수행 시 주의 사항 - 도출된 문제점이 해결되지 않고 방치되는 경우
    - 회고는 나빴던 점을 이야기하고 끝나는 것이 아니라, 정말 개선되는 것을 팀원들이 체감할 수 있도록 보여주는 것이 중요
    - 스크럼 마스터는 회고가 끝난 이후, 회고에서 도출된 개선사항들이 지속적으로 F/up 되고 개선될 수 있도록 관리하고,
      이와 관련돈 진행 내용과 결과에 대해서 팀원들에게 피드백을 제공해야 함


3. Kanban
3-1. kanban
- Agile 개발 프로세스 전반에 걸친 적시개발(Just In Time Development)을 지원하는 방법론
- TPS(Toyota Production System)에서 유래
  . To Do / Doing / Done

- Kanban 특징
  . 워크 플로우 시각화(Visualize workflow)
    - 작업의 흐름은 본질적으로 보이지 않음
    - 작업 흐름의 시각화가 칸반의 핵심
    + 사람들이 작업흐름의 상태를 파악할 수 있음

  . 진행중인 작업 제한(Limit WIP : Work In Process)
    - 각 단계마다 동시에 진행 가능한 작업 수를 제한 하여 자원의 활용도가 높아짐
    + 너무 낮은 wip -> 개발자 유휴 -> 생산성 하락
    + 너무 높은 wip -> task가 유휴 -> 나쁜 lead time
    --> Pending / Analysis / Development / Test / Deploy

3-2. Kanban 과 Scrum의 차이점
구분 /            스크럼 /                                                         칸반
반복주기 /      일정한 길이의 스프린트 (예:2주) /                           없음, 연속적인 흐름
릴리즈방법론 / 프로덕트 오너의 승인하에 각 스프린트 막바지에 배포 / 연속적인 배포, 또는 팀 재량
점수 추정 /     필요함 /                                                          하지 않음(대신 티켓들을 비슷한 작은 크기로 쪼개야 함)
역할 /            프로덕트 오너, 스크럼마스터, 개발팀 /                     따로없음, 팀+필요한 역할 추가
주요지표 /       속도(volocity) /                                                사이클 시간(cycle time)
진척관리 /       Burn Down Chart 를 이용 성과 측정 /                     하나의 스토리가 한번의 반복과정에서 완성(WIP)
                                                                                       Total Cycle Time으로 성과 측정
역할과     /      특정 역할과 업무협의 미팅을 정의(스크럼마스터,제품책임자) / 별도로 정의된 역할과 미팅없음
업무 협의         스프린트 계획 미팅(스토리 내 스프린트 결정)                     조직이 익숙한 방법사용
                                                                                                기존 Scrum 사용 조직은 그대로 사용
기존방법론과 /   Scrum자체 체계의 엄격성때문에 기사용 중인 /           기존 프로세스와 함께 시작하면서 지속적 개선
결합                방법론에서 전환 어려움             

3-3. Kanban을 통한 scrum의 보완점
보완대상 /          보완 상세 내용 /                                                         기대효과

시각화  /            현재 스프린트에서 팀원들이 어느 상태에 있는지를  /             협업 시 시너지
                       한눈에 파악할 수 있음
Story Point       / 예상보다 큰 작업은 주기내 완료하기위한 부담을                 / 프로세스 시각화, 업무 예측성 제고
추정의 불확실성   초래하므로, WIP 조정 및 프로세스 최적화로 불확실성에 대응       


정리하기
- 스프린트 계획
  . 스프린트 백로그 작성
  . Story Point Estimation
- 스프린트 수행
  . 데일리 스크럼
  . 스프린트 리뷰, 회고
- 칸반의 이해
  . 시각화
  . Scrum과의 혼용가능성


정리하기
1. 스프린트 계획은 스프린트 하나를 대상으로 단기 일정을 수립하는 것을 의미한다. 스프린트 계획을 위해서 제품 백로그를
   정제해 스프린트 백로그를 작성해야 하며, 그중 실제 수행해야 할 task의 업무량을 추정해야 하는데  이 추정하는 방법은
   플래닝 포커와 같은 게임을 통해 수행할 수 있다.
2. 스프린트 운영 시 데일리 스크럼을 통해 진척을 확인하고 번다운 차트를 통해 진척률을 관리할 수 있다. 또한 스프린트 리뷰를
   통해 실제 이번 스프린트이 산출물(mvp)를 리뷰할 수 있으며 마직막으로 회고를 통해 해당 스프린트의 개선점을 도출 할 수 있다.
3. 애자일 개발방법론 중 scrum 방법론과 함께 가장 많이 사용하는 방법은 칸반 방법론이다. 칸반은 workflow의 시각화가 장점인
   단순한 방법론으로 특별한 도구 없이 바로 현재 업무에 적용할 수 있는 방법으로 칸반만 사용하는 것 보다는 스크럼방법론과의
   혼용시 더 큰 효과를 발휘할 수 있다.


