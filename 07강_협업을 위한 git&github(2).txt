7강. 협업을 위한 git&github(2) [ 이언 교수 ]

학습개요
본 강의에서는 git 명령에 따른 파일의 상태에 대한 이해와 git 명령어를 되돌리는 방법에 대해 알아보고자 한다.
이를 위해 기본적인 git의 workflow(staging & commit)에서 작업 파일의 상태가 어떻게 변하는지를 알아보고자 한다. 그리고 다양한
상황에서 git 명령을 취소하고 상태를 되돌리는 방법에 대해 시나리오 기반으로 다양한 예시를 살펴보고자 한다.

학습목표
1. git의 상태에 대하여 이해한다.
2. 다양한 상황에서 git 명령어를 되돌리는 방법과 git 워크플로우를 이해한다.

학습목차
1. git basics(2)
2. git basics(3)
3. git basics(4)

1. git basics(2)
1-1. week6 summary : git의 라이프사이클
- git의 3가지 영역에서 각 파일들은 '어떤 상태'를 가지게 되는데 Untracked, Unmodified, Modified, Staged로 나뉘어 짐.
  . Untracked : 파일 생성 되었지만 작업 내용이 git으로 추적(관ㄹ)되고 있지 않은 상태
  . Unmodified : git으로 추적(관리)되고 있고, 내용이 수정되지 않은 상태
  . Modified : git으로 추적(관리)되고 있으며, 내용이 수정된 상태
  . Staged : Staging Area에 추가된 상태

1-2. 버전을 만드는 단계별 파일 상태
- git에서 버전(기록)을 만드는 각 단계마다 파일의 상태를 다르게 표시
- 따라서 파일의 상태를 이해하면 이 파일이 버전 관리의 여러 단계 중 어디에 있는지,
  그 상태에서 어떤 일을 할 수 있는지 알 수 있음

1-3. git 명령에 따른 파일의 상태 변화
- Working directory에 있는 파일은 tracked file과 untracked file로 나뉨
- git 초기 셋팅 후 test.sh 파일을 생성 후 staging & commit
- test.sh를 수정 (staging & commit 하지 않음)
- test2.sh 파일 생성(staging & commit 하지 않음)

- git status 명령을 통해 두 파일의 상태를 확인할 수 있음.
- test.sh : tracked file(modified) / test2.sh : untracked file

  Untracked   Unmodified         Modified            Staged

  test2.sh에   test.sh            -> test.sh에
  test추가     commit된 상태      hello world2추가   

  --> 파일 생성만 한 상태(git에 버전관리를 등록하지 않아 git이 추적하지 않음)

- test.sh와 test2.sh를 staging 한 후 상태(status)를 확인
- test.sh : tracked file(staged) / test2.sh : tracked file(staged)

  Untracked   Unmodified         Modified              Staged

                                         test.sh에           -> test.sh
                                         hello world2추가   
   test2.sh   ------------------------------------------> test2.sh

- test.sh와 test2.sh를 commit 한 후 상태(status) 및 히스토리(log) 확인
- test.sh : tracked file(unmodified) / test2.sh : tracked file(unmodified)

  Untracked   Unmodified         Modified              Staged

                 test.sh / test2.sh <--------------------- test.sh / test2.sh
  --> working tree clean : stage에 아무것도 없는 상태

- 동시에 여러 파일을 commit하여 각 commit의 개별 파일 정보를 확인하고 싶은 경우,
  git log --stat 명령을 통해 확인이 가능


2. git basics(3)
2-1. Undo changed(되돌리기) 기본 시나리오
- 프로젝트의 이전상태로 이동하기 방법

2-2. 프로젝트의 이전 상태로 이동하기 - git checkout
- 이전 실습 자료 가져오기(1)
  . Shell command로 시나리오별 수행 내용을 입력

  [ 실습 shell script ]
  mkdir git_project
  cd git_project
  git init
  git config --global user.name 실습자이름
  git config --global user.email 실습자email
  echo hello world > test.sh
  git add test.sh
  git commit -m "initial commit"                            // commit1
  echo hello new world >> test.sh
  echo hello git project > test2.sh
  git add
  git commit -m "modify test.sh, make test2.sh"         // commit2
  echo commit3 > test3.sh
  git add
  git commit -m "3rd commit : make new shell script"   // commit3

- 이전 실습 자료 가져오기(2)

- git 저장소 만들기 - git init
- 주로 다음 두 가지 중 한 가지 방법으로 git 저장소를 만들어 사용
  . 1. 아직 버전관리를 하지 않는 로컬 디렉토리 하나를 선택해서 git 저장소를 적용
  . 2. 다른 어딘가에서 git 저장소를 Clone

- https://github.com/EON-LEE/Course-SoftwareEngineering에서 clone가능

- 커밋 체크섬(해쉬) 확인
  . 이전 상태를 확인/이동하기 위해 이전 실습자료의 commit log 및 체크섬을 확인
  . git log를 통해 확인한 체크섬 첫 7자리는 각 commit을 위한 고유한 ID로 사용이 가능함
  --> checksum은 다름

- 이전 커밋으로 되돌리기(1)
  . git checkout이라는 git 명령을 사용해서, 특정 시점의 스냅샷으로 이동 가능
  --> 75c2c84 -> 2fe0804 -> f1bf658 순으로 해쉬값 생성됨
  --> git checkout 2fe0804  # 2fe0804 해쉬값 상태로 되돌리기, 해쉬값 이후 생긴 데이터는 없어짐

- 이전 커밋으로 이동하기(2)
  --> git checkout 75c2c84 


3. git basics(4)
3-1. Undo changes(되돌리기) 시나리오
- Staging 하지 않았을 때 되돌리기(Modified 파일 되돌리기)
- Staging 했을 떄 되돌리기(파일 상태를 Unstage로 변경하기)
- Commit 했을 떄 되돌리기(최신 commit 취소하기)
- Commit 했을 때 되돌리기(특정 commit으로 되돌리기)
- Commit 했을 떄 되돌리기(commit 삭제하지 않고 되돌리기)
- 방금 commit 한 comment 수정하기

3-2. Staging 하지 않았을 때 되돌리기(Modified 파일 되돌리기)

Untracked        Unmodified      Modified           Staged    Working Directory       Staging Area       git directory(Repository)
     --------------------Add then file------------------>                  <------------Checkout then project--------------
                          --Edit the file-->
                                               -Stage the file->                  -----Stage fixes----->
     <-Remove the file-
                             <-----------Commit------------                                             -----------Commit-------->

- test3.sh의 내용을 commit4로 변경 (week7_1.sh의 내용이 다 준비되어 있는 상태에서)
- git status 를 통해 test3.sh가 stage에 올라가 있지 않음을 확인 가능
  [ test3.sh 수정 ]
  bash-4.4$ cat test3.sh
  commit3
  bash-4.4$ echo commit4 > test3.sh
  bash-4.4$ cat test3.sh
  commit4
  bash-4.4$ _

  [ git status 확인 ]
  bash-4.4$ git status
  on branch master 
  ....
  ....
  no changes added to commit (use "git add" and/or "git commit -a")
  bash-4.4$ _

- test3.sh를 변경사항을 취소하려면 checkout 명령을 사용
- git checkout --test3.sh
  [ checkout command로 test3.sh 파일 되돌리기 ]
  bash-4.4$ git checkout -- test3.sh
  bash-4.4$ git status
  On branch master
  nothing to commit, working tree clean
  bash-4.4$ cat test3.sh
  commit3
  bash-4.4$ _ 

3-3. Staging 했을 떄 되돌리기(파일 상태를 Unstage로 변경하기)
- test2.sh의 내용을 "undo practice 2"로 변경
- git status 를 통해 test2.sh가 stage에 올라갔음을 확인
  [ test2.sh 수정 ]
  bash-4.4$ cat test2.sh
  hello git project
  bash-4.4$ echo undo practice 2 > test2.sh
  bash-4.4$ cat test2.sh
  undo practice 2
  bash-4.4$ _

  [ git status 확인 ]
  bash-4.4$ git add test2.sh
  bash-4.4$ git status
  On branch master
  Changes to be committed:
  .........
             modified: test2.sh
  bash-4.4$ _

- test2.sh를 stage에서 내릴려면(to unstage) git reset HEAD 명령을 사용
- Staging 상태를 modified 상태로 바꾼 것이기에 수정사항의 변화는 없음
  [ git reset HEAD command로 test2.sh파일 unstaging하기 ]
  bash-4.4$ git reset HEAD test2.sh
  Unstaged changes after reset:
  M          test2.sh
  bash-4.4$ _

  [ test2.sh 파일 내용 ]
  bash-4.4$ cat test2.sh
  undo practice 2
  bash-4.4$ _

  [ git status 확인 ]
  bash-4.4$ git status
  On branch master
  Changes not staged for commit:
  ......
  ......
  no changes added to commit(use "git add" and/or "git commit -a")
  bash-4.4$ 

3-4. Commit 했을 떄 되돌리기(최신 commit 취소하기)
- test2.sh의 내용을 "undo practice 3"로 변경
- git commit 명령어로 test2.sh를 실제로 저장소에 commit함
  [ test2.sh 수정 및 git staging ]
  bash-4.4$ echo undo practice 3 > test2.sh
  bash-4.4$ git add test2.sh
  bash-4.4$ git status
  On branch master
  Changes to be committed:
      (use "git reset HEAD <file> .... " to unstage)
            modified:   test2.sh
  bash-4.4$ _

  [ git commit ]
  bash-4.4$ git commit -m "undo practice 3"
  [master a049ffa] undo practice 3
  1 file changed, 1 insertion(+), 1 deletion(-)

  [ git log 확인 ]
  a049ffa (HEAD -> master) undo prctice 3
  4d0a678 3rd commit : make new shell script
  6211353 modify test.sh, make test2.sh
  9bfd7a1 Initial commit

- 최신 commit을 되돌리려면 git reset 명령 다음에 HEAD^를 붙임
  (HEAD^는 현재 HEAD가 가리키는 Branch의 최신 commit을 가리킴)
- git reset HEAD^로 최신 commit 취소 및 unstaging 까지 동시에 일어남.
  [ commit취소 및 unstagint ]
  bash-4.4$ git reset HEAD^
  Unstaged changes after reset:
  M          test2.sh
  bash-4.4$ _

  [ git log 확인 ]
  4d0a678 (HEAD -> master) 3rd commit : make new shell script
  6211353 modify test.sh, make test2.sh
  9bfd7a1 Initial commit

  [ test2.sh 파일 내용 ]
  bash-4.4$ cat test2.sh
  undo practice 3
  *commit을 취소하고 Unstaging상태로 만든 것이기에 파일 내용이 원복 되지 않음

3-4-1. 참고) git reset 명령어
- git reset 명령의 옵션은 아래와 같음
  . --soft HEAD^ : 최근 commit을 하기 전 상태로 작업을 되돌림
  . --mixed HEAD^ : 최근 commit과 staging을 하기 전 상태로 작업을 되돌림 옵션없이 git reset을 사용할 경우 이 옵션을 기본으로 작동함.
  . --hard HEAD^ : 최근 commit과 staging, 파일 수정을 하기 전 상태로 작업을 되돌림. 주의사항으로는 이 옵션으로 되돌린 내용은 복구할 수 없음.

3-5. Commit 했을 때 되돌리기(특정 commit으로 되돌리기)
- 특정 commit으로 되돌리는 내용을 위해 test2.sh를 총 4번 수정 후 commit 수행 및 git log확인 가능
  [  test2.sh 수정 및 commit ]
  bash-4.4$ echo a > test2.sh
  bash-4.4$ cat test2.sh
  a
  bash-4.4$ git add test2.sh
  bash-4.4$ git commit -m "r1"
  [master d705532] r1
  1 file changed, 1 insertion(+)
  bash-4.4$ _

  bash-4.4$ echo b >> test2.sh
  bash-4.4$ cat test2.sh
  a
  b
  bash-4.4$ git add test2.sh
  bash-4.4$ git commit -m "r2"
  [master ffd18fc] r2
  1 file changed, 1 insertion(+)
  bash-4.4$ _
  
  bash-4.4$ echo c >> test2.sh
  bash-4.4$ cat test2.sh
  a
  b
  c
  bash-4.4$ git add test2.sh
  bash-4.4$ git commit -m "r3"
  [master f0758be] r3
  1 file changed, 1 insertion(+)
  bash-4.4$ _

  bash-4.4$ echo d >> test2.sh
  bash-4.4$ cat test2.sh
  a
  b
  c
  d
  bash-4.4$ git add test2.sh
  bash-4.4$ git commit -m "r4"
  [master 1387c39] r4
  1 file changed, 1 insertion(+)
  bash-4.4$ _

  [ git log 확인 ]
  r4
  r3
  r2
  r1
  
- 두번째 수행한 commit으로 되돌리기 위해 해당 commit의 hash(checksum)값을 사용
- git reset -hard "복사한 2번째 commit hash(checksum)"
  [ 되돌리기 전 git log 확인 ]

  [ git reset command 실행 ]
  bash-4.4$ git reset --hard 27cf4ee
  HEAD is now at 27cf4ee r2
  bash-4.4$ _

  [ test2.sh 내용 확인 ]
  bash-4.4$ ls
  test.sh   test2.sh   test3.sh
  bash-4.4$ cat test2.sh
  a
  b
  bash-4.4$ _
  -- r2 commit으로 되돌아감

  [ 되돌린 후 git log 확인 ]

3-6. Commit 했을 떄 되돌리기(commit 삭제하지 않고 되돌리기)
- 나중에 사용할 것을 대비해 commit을 삭제하지 않고 취소한 commit을 남겨두어야 할 때가 있음.
- git revert 명령으로 commit을 삭제하지 않고 되돌리기를 할 수 있음.
  [ test2.sh 수정 및 commit ]
  bash-4.4$ echo e >> test2.sh
  bash-4.4$ git add test2.sh
  bash-4.4$ git commit -m "r5"
  [master 1b7a2d0] r5
  1  file changed, 1 insertion(+)
  bash-4.4$ _

  [ git log 확인 ] 

- 두번째 수행한 r2 commit으로 되돌리기 위해 해당 commit의 hash(checksum)값을 사용
- git revert "복사한 2번째 commit hash(checksum)"
- revert 명령 실행시 vim 이 실행되며, 해당 revert에 대한 comment를 남길 수 있음
  bash-4.4$ git revert d2e5013
  [master 9a813f9] Revert "r5"
  1  file changed, 1 deletion(-)
  bash-4.4$ _
  
- git log 확인 결과, r5 commit을 revert한 새로운 commit이 생겼음을 확인할 수 있음.
  (r5 commit을 지우는 대신 해당 commit을 되돌리기 한 commit을 새로 생성)
- commit 되돌리기에 따라 이전 commit의 상태로 test2.sh가 돌아갔음을 확인할 수 있음
  [ git log 확인 ]

  [ test2.sh 추소 내역 확인 ]
  bash-4.4$ cat test2.sh
  a
  b
  bash-4.4$ _

3-7. 방금 commit 한 comment 수정하기
- commit 시 comment를 잘못 입력했다면 --amend 옵션으로 수정 가능
- (week7_1.sh의 내용이 다 준비되어 있는 상태에서) git commit -amend 실행
  [ 현재 git log 확인 ]

  [ git commit --amend명령 실행 ]
  bash-4.4$ git commit --amend

  [ comment를 수정할 수 있는 vim화면 ]

- comment를 수정하고 normal mode로 가서 save하면 commit의 comment가 변경되었음을 확인할 수 있음
  [ comment 변경 ]
  [ git log 확인 ]


[ 정리하기 ]
- git 명령어에 따른 파일의 상태 변화에 대한 이해
  . Untracked / unmodified / modified / staged

- Undo changes(되돌리기)
  . git checkout : 이전 commit을 확인/이동
  . git reset : commit을 취소
  . git revert : 새로운 commit을 적용하여 특정 commit을 취소 (삭제하지 않음)


1. git의 3가지 영역에서 각 파일들은 '어떤 상태'를 가지게 되는데 Untracked, Unmodified, Modified, Staged로 나눠진다.
   Untracked는 파일 생성 되었지만 작업 내용이 git으로 추적(관리)되고 있지 않은 상태이며, Unmodified 상태는 git으로 추적(관리)되고 있고,
   내용이 수정되지 않은 상태이다. Modified 상태는 git으로 추적(관리)되고 있으며, 내용이 수정된 상태이며, Staged 상태는
   Staging Area에 추가된 상태이다. git의 주요 명령어(add&commit)에 따라 작업 파일의 상태는 untracked에서 modified로,
   modified에서 staged로 그리고 staged에서 unmodified로 변한다.
2. git checkout 명령을 통해 git 프로젝트의 이전 상태를 확인하거나 이동할 수 있다.
3. git의 checkout, reset, revert명령어를 통해 다양한 상황에서 commit을 되돌리거나 취소할 수 있다.
