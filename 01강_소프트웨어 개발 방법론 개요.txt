1강. 소프트웨어 개발 방법론 개요 [ 이언 교수 ]

학습개요
본 강의에서는 소프트웨어 개발 방법론의 개념에 대해 살펴보고 머신러닝 소프트웨어 개발에 있어 소프트웨어 개발 방법론의 필요성에
대해 넓은 맥락에서 이해하고자 한다. 이를 위해 데이터 분석 환경의 변화와 서비스 개발 환경에 대한 이해를 기반으로 머신러닝 프로젝트에서
소프트웨어 개발 방법론이 왜 필요한지를 살펴보고, 소프트웨어 개발 방법론이라는 과목에서 함께 배울 computer science 관련 지식 및
방법론에 관련된 내용을 간략하게 설명하고자 한다.

학습목표
1. 소프트웨어 개발 방법론의 개념 및 필요성, 목적을 이해한다.
2. 머신러닝 프로젝트에서 소프트웨어 개발 방법론의 필요성에 대해 이해한다.


학습목차
1. Course Introduction
2. 소프트웨어개발방법론 필요성



1. Course Introduction
1-1. 과목명 : 소프트웨어 개발방법론
- 교과목 개설 필요성 및 목적
  . 현업에서 인공지능을 적용하기 위해서는 머신러닝에 대한 지식외에 소프트웨어 개발에 대한 실제적인 지식이 필요
- 교육목표
  . 머신러닝을 서비스에 사용되는 소프트웨어로 만들기 위해 필요한 실제적인 지식들을 학습
- 선수 지식
  . Python
- 교과목 운영방안
  . 온라인 강의 : 이론 강의
  . 온라인 활동 : 추천 도서 및 심화 학습을 위한 Workbook 제공
  . 평가 : 출석, 과제물, 온라인 활동, 중간.기말시험을 고려한 종합 평가

1-2. 강의 구성
- 1주차 : 소프트웨어 개발방법론 개요  - 과목소개, 필요성
- 2주차 : Linux Fundamentals(1) - Linux의 이해, Linux File system의 이해
- 3주차 : Linux Fundamentals(2) - Linux의 File system, 사용자 관리, Process 관리
- 4주차 : Vim Editor - Vim Editor의 이해
- 5주차 : Shell Programming - Bash Shell의 이해, Shell Script
- 6주차 : 협업을 위한 git&github(1) - git Introduction, git basics(1)
- 7주차 : 협업을 위한 git&github(2) - git basics(2)
- 8주차 : 협업을 위한 git&github(3) - git branching(1)
- 9주차 : 협업을 위한 git&github(4) - git branching(2)
- 10주차 : 협업을 위한 git&github(5) - github 개요, github 연동
- 11주차 : 협업을 위한 git&github(6) - github협업
- 12주차 : Agile 개발방법론(1) - Agile 개발방법론의 이해, Scrum의 이해(1)
- 13주차 : Agile 개발방법론(2) - Scrum의 이해(2), Kanban의 이해
- 14주차 : 오픈소스 라이센스 - 다양한 오픈소스 라이센스의 이해
- 15주차 : Machining Learning Practice - ML Pipleline의 이해, 유닛테스트의 개념과 실제

1-3. References
- 각 강의 워크북에 더 자세한 참고자료의 정보가 있음.
  . 손에 잡히는 Vim
  . 이것이 우분투 리눅스다
  . Building Machine Learning Pipelines
  . 팀 개발을 위한 Git GitHub 시작하기


2. 소프트웨어개발방법론 필요성
2-1. 소프트웨어 개발방법론 정의
- 소프트웨어를 생산하는 데에 필요한 프로그래밍 개발 과정들을 정리하고 표준화하여 프로그래머들이
  프로그래밍 개발과정에서 각 개인이 개발과정에서의 일관성을 유지하고 프로그래머들간의 효과적인 협업이
  이루어질 수 있도록 돕기 위한 방법론 [ wikipedia ]
  
2-2. 소프트웨어 개발방법론
- 대규모 프로젝트를 수행하는 과정에서는 각 기능을 개발하는 프로그래머들간의 효과적인 협업을 위해
  소프트웨어 개발 방법론에 대한 이해는 필수적임

2-3. 머신러닝 프로젝트에서는?
- 마찬가지로 머신러닝 프로젝트에서는 데이터 분석가와 엔지니어 간의 효과적인 협업이 필수
  
2-4. Why?
- 데이터 분석 환경의 변화 & 서비스 개발 환경의 변화

2-5. 데이터 분석 환경의 변화
- 과거 - 현재의 분석 환경 차이
- 분석 환경의 변화 이유
- 과거의 일반적인 데이터 분석 환경
  . 개인용 데스크톱 컴퓨터
  . 윈도우즈 os
  . 분석 상용 프로그램(sas, spss, matlab, etc)
  . Gui 메뉴로 분석을 실행

- 현재의 데이터 분석 환경
  . 텍스트 기반의 콘솔/터미널 환경
  . 리눅스 운영체제
  . R/Python 프로그래밍 환경
  . GPU 사용 : 뉴럴 넷의 활성화로 GPU 사용 증가
  . 클라우드 서비스 사용

2-6. 분석 환경이 변화하는 이유
2-6-1. 분석하고자 하는 문제와 요구사항이 다양해짐
- GUI 기반의 분석 플랫폼이나, 메뉴나 명령어 방식으로 수행되는 분석 상용 솔루션의 경우 보통 풀고자 하는
  문제의 목표 및 데이터, 결과물의 형식 등이 미리 정해져 있고 여기에 따라서만 문제를 풀 수 있는 경우가 대다수 임.
- 만약 분석하고자 하는 문제가 약간이라도 원래의 문제에서 변형된 형태이거나, 결과물을 다른 형식으로 표현해야 하는
  경우 문제 해결이 쉽지 않음 (자유도가 낮음)

2-6-2. 분석의 주체가 달라지고 있음
- 분석의 주체가 사람이 아닌 프로그램 혹은 시스템이 되어가고 있음.
- 실제로 어떤 업무를 처리하는 시스템이 업무 처리과정에서 필요한 분석 결과를 실시간으로 얻기 위해, 분석가가 만든
  분석 프로그램/알고리즘을 수행시키고 그 결과를 리턴받아 업무에 적용하는 방식으로 변화하고 있음.
- 즉, 분석을 포함한 전체 업무 프로세스를 컴퓨터 프로그램이 자동으로 수행하게 되어가는 중임

- 2021 Tesla AI Day 
  . 4. Scalable Scenaril Generation 
  --> 자율주행 데이터 수집 및 관련 데이터를 사용하여 문제 발생하는 과정에도 사용
  . 5. Scenaril Reconstruction
  --> 수집된 데이터에 대한 수작업 레이블링 작업을 자동으로 레이블링하여 새로운 합성 데이터 생성

2-6-3. 서버기반 환경의 활성화
- 대부분의 실제 업무처리 시스템이 Linux OS가 설치된 서버 위에서 운영됨
- 원활한 연결을 위해 분석 프로그램도 같은 하드웨어나 OS위에서 돌아가는 것이 자료 처리나 시스템 연동에 좋음

2-7. 서비스 개발 환경의 변화
- Production 환경에서의 Machine Learning
- MLOPS의 등장
- Machine Learning 협업 프로세스

2-7-1. Production 환경에서의 Machine Learning
- Era of AI - AlphaGo의 등장 // 실제 머신러닝이 활용단계에 와 있음을 체감한 이벤트
- Era of AI - Convolution Neural Network의 발전
  . IMAGENET : 알고리즘으로 이미지데이터를 분류해내는 대회 
  --> 20%대의 오류를 2012년을 기준으로 알렉스넷(AlexNet)을 통해 10%대로 급격한 향상
  --> 2015년 MS ResNet의 경우 인간 5.1% 보다 더 낮은 4.94%로 더 낮아짐

- Data Science 영역 : 알고리즘이 강조되는 경향이 있음
- Modeling 관점에서의 ML
  . 보통 자신의 컴퓨터, 서버등에서 실행 고정된 데이터를 사용해 학습
  . 실제 서비스에서는?
  . Raw Data -> Data pre-processing(Data Pre-processing Modules) <-> Prepared Data 
    -> Apply Algorithms(Machine earning Algorithms) <-> andidate Model -> Chosen Model(Application)

- ML Model을 활용한 Web Service를 만든다면 필요한 기술 stack은?
  api           Container     Server/Cloud     Orchestration     CI/CD (배포를 위해서)    형상관리
  - FastAPI    - docker      - aws              - 쿠버너티스      - Jenkins                    - GitHub
  - Flask                        - Azure           - DB : ORACLE/MySQL    

- ML Model을 활용한 Web Service를 운영하는 경우 발생할 수 있는 상황
  .  모델의 결과값이 이상하게 나오는 경우 - 재현 가능성
  +1. 이상하다고 주장한 결과값이 어딘가 저장되엉 있는 경우, debug 가능
  +2. 결과값이 저장되어 있지 않는 경우, 해당 이벤트의 결과값을 재현하기 위해 raw data 추출 작업부터 모든 과정을 재현해야 debug가능

  .  모델의 결과값이 이상하게 나오는 경우 - 데이터 이슈
  +1. 특정 feature의 범위가 잘못된 데이터가 input을 들어옴
  +2. Data Type이 사전에 정의된 대로 Data가 생성되지 않은 경우

- ML Model을 활용한 Web service를 운영하는 경우 발생할 수 있는 상황
  . 최근에 배포한 모델의 성능 확인 - 모니터링 대시보드 존재 여부
  +1. 모델 모니터링 대시보드를 통해 확인
  +2. 모니터링 대시보드가 없다면 최신 raw data를 추출하여 실제로 성능 확인을 하는 작업이 필요

  . Research에서 더 좋았던 새로운 모델이 Production에선 성능 저하 발생
  +1. Research Model 및 Experiment config들이 모두 기록되어 있다면 쉽게 필요 모델을 찾아 deploy 가능
  +2. Research 환경에서의 model management가 제대로 되지 않았다면 재학습 또는 타겟 모델을 확인하는 작업이 필요

- (Production 관점에서) Model은 일부의 영역
  . Production을 위해선 나머지 영역들에 대한 깊은 이해가 필수
  - Configuration / Data Collection / Data Verification / Machine Resource Management / Serving Infrastructure / Monitoring
                                            / ML Config / Analysis Tools /
                      / Feature Extraction    / Process Management Tools       

- Research 와 Production의 ML
                 Research                                                         Production
  데이터     : 고정(Static)                                                      변함(Dynamic - Shifting)
  중요 요소 : 모델 성능(Accuracy, RMSE, AUROC, etc)                   모델 성능, 빠른 Inference 속도
  도전 과제 : 더 좋은 성능을 내는 모델, 새로운 구조의 모델             안정적인 운영, 유지보수를 위한 전체 시스템 구조
  학습       : 데이터가 고정이라 모델 구조, 파라미터 기반 학습및       시간의 흐름에 따라 데이터가 변경되어 재학습이 발생
                재학습 정잭 수립
  목적       : 논문, 특허, 이론적 근거를 바탕으로 문제점 개선           실제 서비스상에서 발생하는 문제 해결
  검증 표현 : Offline Evaluation                                                Online Evaluation


2-7. MLOps의 등장
- MLOps : ML + Ops
- 머신러닝 엔지니어링 + 데이터 엔지니어링 + 인프라
- 머신러닝 모델 개발(ML)과 머신러닝 모델 운영(Ops)에서 사용되는 문제, 
  반복을 최소화하고 비즈니스 가치를 창출하는 것이 목표
- 모델링에 집중할 수 있도록 관련된 인프라를 만들고, 자동으로 운영되도록 만드는 일
  예 : API형태로 서버 만들기, 실험 파라미터와 결과 저장하기, 모델 결과 자동화하기, 데이터 Validation 등

- 비즈니스 문제에 머신러닝/딥러닝을 적용하는 Case가 많아짐
- Production 환경에 배포하는 과정엔 Research의 모델이 재현 가능해야 함 + 현실의 Risk 있는 환경에서 잘 버틸 수 있어야 함
- MLOps의 목표는 빠른 시간 내에 가장 적은 위험을 부담하며 아이디어 단계부터 프러덕션까지 ML 프로젝트를
  진행할 수 있도록 기술적 마찰을 줄이는 것

2-7-1. MLOps - Level 0 (수동 프로세스)
- 최첨단 모델을 빌드할 수 있는 데이터 과학자와 ML 연구원이 있지만, ML모델을 빌드하고 배포하는 과정은
  완전히 수동으로 이루어짐.
- Level 0에서 가능한것
  . 수동, 스크립트 기반, 양방향 프로세스
  . ML 과 작업 간 연결 해제
  . 간헐적인 출시 반복 : 수작업에 의한 빌드에 대한 출시
  . CI 및 CD 없음
  . 예측 서비스를 의미하는 배포
  . 활성 성능 모니터링 없음
- Offline data -> Data extraction and analysis <-> Data Preparation <-> Mldel training <-> Model evaluation and validation 
  -> Trained model -> model registry(ML Ops) -> Model serving


2-7-2. MLOps - Level 1 (ML 파이프라인 자동화)
- ML 파이프라인을 자동화하여 모델을 지속적으로 배포시킬 수 있는 수준
  . 모델 예측 서비스를 지속적으로 제공할 수 있음
- Level 1에서 가능한것
  . 빠른 실험
  . 실험-운영 균형
  . 구성요소 및 파이프라인의 모듈화된 콛 : 소스코드의 모듈화, 구성요소의 컨테이너화
  . 모델의 지속적 배포
  . ML 파이프라인 트리거 : 일정 기준, 새 학습 데이터의 가용성 기준, 모델 성능 저하 시, 데이터 분포의 중요한 변화 시


2-7-3. MLOps - Level 2 (CI/CD 파이프라인 자동화)
- 데이터 과학자가 특성 추출, 모델 아키텍처, 초매개변수에 대한 새로운 아이디어를 빠르게 살펴볼 수 있음.(학습자동화)
  . 데이터 과학자는 이러한 아이디어를 구현하고 새 파이프라인 구성요소를 대상 환경에 자동으로 빌드, 테스트, 배포할 수 있음
- Level 2에서 가능한것
  . 소스 제어
  . 서비스 테스트 및 빌드
  . 배포 서비스
  . 모델 레지스트리
  . 특성 저장소
  . ML 메타데이터 저장소


2-8. Machine Learning 협업 프로세스
- 개발 환경 변화에 따라, Data Scientist 와 Data Engineer 간의 Role 차이에 따른 협업의 Issue 발생
- 전체 production process를 같이 share 하며 진행함
- 상호간의 이해가 필수

2-9. Key point of this course
- Data Analyst / Data Scientist 들이 data engineer / software engineer들과 machine learning 프로젝트를
  수행함에 있어 알아야 할 기본적인 Computer Science 관련 지식 및 협업을 위해 알아야 할 방법론, Tool,
  문화 등을 이해할 수 있도록 강의를 구성
  . Linux vim, shell, github
  . Agile 방법론
  . ML Production 관점에서의 pipeline의 이해

정리하기
- ML Product 개발 환경은 매우 급격히 변화중임.
  . 단순히 알고리즘을 잘 개발하는 영역에서 벗어나 실제적인 서비스를 잘 개발하기 위한 방향(MLOPS)으로 급격한 진홪ㅇ
  . Core 알고리즘은 ML Production에서는 일부분에 지나지 않음. (알고리즘의 중요도가 낮다는 것은 아님)
- 개발환경의 변화에 따른 Data Scientist와 engineer와의 협업도 중요한 issue로 부상
- 이에 따라 분석가 또한 효율적인 협업을 위한 소프트웨어 개발 과정의 기본지식을 습득할 필요성이 있음.


정리하기
1. ML Product 개발 환경은 매우 급격히 변화 중이다. Industry에서는 단순히 알고리즘을 잘 개발하는 영역에서
   벗어나 실제적인 서비스를 잘 개발하기 위한 방향(MLOPS)으로 급격히 진화 중이다.
2. 개발환경의 변화에 따른 Data scientist와 engineer와의 협업도 중요한 issue로 부상하고 있다.
3. 이에 따라 Data scientist 또한 효율적인 협업을 위한 소프트웨어 개발 과정의 기본지식을 습득할 필요성이 있다.
